import logging
import urllib

import requests
import io
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from past.builtins import execfile
from vk_api import ApiError

from api_vk import get_user_status, get_user_photos_saved, get_user_avatar
from config import TOKEN, VK_ID, VIP_USER, ADMIN
from test import add_user, add_new_message, get_user_messages


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
b1 = types.KeyboardButton('–ü–æ–º–æ—â—å')
b2 = types.KeyboardButton('–°–æ—Ö—Ä—ã')
b3 = types.KeyboardButton('–°—Ç–∞—Ç—É—Å')
b4 = types.KeyboardButton('–ê–≤–∞—Ç–∞—Ä–∫–∞')
b5 = types.KeyboardButton('–ï—â—ë –æ–¥–Ω–∞')
b6_A = types.KeyboardButton('–°–æ–æ–±—â –≤ –ë–î')
keyboard.add(b1, b2, b3, b4, b5)


help_text = f'<i>/start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞, –≤—ã–∑—ã–≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã</i>\n\n'\
f'<i>/get_save_photo - –æ–ø—Ä–∞–≤–∏—Ç —Ç–µ–±–µ –±–æ–º–±–∏—á–µ—Å–∫–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∫–∏</i>\n\n'\
f'<i>/help - –Ω—É —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≥–ª—É–ø–µ–Ω—å–∫–∏—Ö</i>\n\n'\
f'<i>–Ω—É –∞—Ä–∞ —Å—ã—Ç—ã–º–∏ –¥–∞–ª—å—à–µ –∏ —Ç–∞–∫ –≤—Å–µ –ø–æ–Ω—è—Ç–Ω–æ..</i>'



logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)



def download_photo(url):
    response = requests.get(url)
    return response.content

@dp.message_handler(commands='start')
async def start(message: types.Message):
    chat_id = message.chat.id
    username = message.chat.username
    fullname = f'{message.chat.first_name} {message.chat.last_name}'
    if str(chat_id) == VIP_USER:
        await bot.send_message(chat_id, f'–ß–µ–≥–æ –∂–µ–ª–∞–µ—Ç —Å–∞–º–∞—è –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –¥–µ–≤—É—à–∫–∞ –Ω–∞ —Å–≤–µ—Ç–µ?ü¶≠', reply_markup=keyboard)
    else:
        await bot.send_message(chat_id, f'–ß–µ –Ω–∞–¥–æ?üóø', reply_markup=keyboard)
    add_user(chat_id, username, fullname)
    add_new_message(message)


@dp.message_handler(commands='help')
async def help(message: types.Message):
    chat_id = message.chat.id
    await bot.send_message(chat_id, help_text, parse_mode='html')
    # await message.delete()
    add_new_message(message)


@dp.message_handler(commands='get_save_photo')
async def get_save_photo(message: types.Message):
    media_group = []
    chat_id = message.chat.id
    if VK_ID.isdigit():
        await message.answer('–°–µ–∫—É–Ω–¥–æ—á–∫—É...üêå')

        photo_list = get_user_photos_saved(VK_ID)

        if photo_list is None:
            await message.answer(f'–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∫–∞–º —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üîí')
        elif len(photo_list) == 0:
            await message.answer(f'–£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ–∫ ü•∫')
        else:
            for photo_url in photo_list:
                media_group.append(types.InputMediaPhoto(media=photo_url))
            await bot.send_chat_action(chat_id, action=types.ChatActions.UPLOAD_PHOTO)  # –°–æ–æ–±—â–∞–µ—Ç —é–∑–µ—Ä—É –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ
            await message.answer('–ö—Ä–∞–π–Ω–∏–µ 10 —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ–∫:')
            await bot.send_media_group(chat_id, media=media_group)
    # await message.delete()
    add_new_message(message)



@dp.message_handler(commands='get_status')
async def get_status(message: types.Message):
    vk_status = get_user_status(VK_ID)['text']
    if vk_status is None:
        await message.answer(f'–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–æ—Å—Ç—É–ø üîí')
    elif len(vk_status) == 0:
        await message.answer(f'–£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∏–ª–∏ –æ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ωü•∫')
    else:
        await message.answer(f'–°—Ç–∞—Ç—É—Å: "{vk_status}" \U0001F60E')
    # await message.delete()
    add_new_message(message)


@dp.message_handler(commands='get_avatar')
async def get_avatar(message: types.Message):
    chat_id = message.chat.id
    avatar = get_user_avatar(VK_ID)
    await bot.send_chat_action(chat_id, action=types.ChatActions.UPLOAD_PHOTO)  # –°–æ–æ–±—â–∞–µ—Ç —é–∑–µ—Ä—É –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ

    await bot.send_photo(chat_id, photo=avatar)
    # await message.delete()
    add_new_message(message)


@dp.message_handler(commands='mems')
async def mems(message: types.Message):
    await message.answer(f'–û—Ç—Å—Ç–∞–Ω—å.')
    # await message.delete()
    add_new_message(message)


@dp.message_handler(content_types=types.ContentType.TEXT)
async def handle_text(message: types.Message):
    if message.text in '–ü–æ–º–æ—â—å':
        await help(message)
    elif message.text == '–°–æ—Ö—Ä—ã':
        await get_save_photo(message)
    elif message.text == '–°—Ç–∞—Ç—É—Å':
        await  get_status(message)
    elif message.text == '–ê–≤–∞—Ç–∞—Ä–∫–∞':
        await get_avatar(message)
    elif message.text == '–ï—â—ë –æ–¥–Ω–∞':
        await mems(message)
    elif message.text == '–°—Ç–∞—Ä—Ç':
        await start(message)

    elif message.text[:2] == '//' and message.chat.id == int(ADMIN):
        print('ffff')
        messages = get_user_messages(message.text[2:])
        mess = [f'{m.id}. {m.message} | {m.date_message.strftime("%d.%m.%y %H:%M")}\n' for m in messages if messages]
        print(''.join(mess))
        await message.answer(f'd')

    else:
        await message.answer(f"K—ä—ã–∑–≥—É—Ä—ã|—É—ç–∫—ä—ã–º\n\nI don't understand\n\n–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é\n\nIch verstehe nicht")
        add_new_message(message)





if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
